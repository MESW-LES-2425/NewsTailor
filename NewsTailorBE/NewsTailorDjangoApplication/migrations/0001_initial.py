# Generated by Django 4.2.16 on 2024-11-15 10:51

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('read_time', models.IntegerField()),
                ('fetch_period', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='NewsArticle',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('content', models.TextField()),
                ('published_at', models.DateTimeField()),
                ('url', models.URLField(max_length=256, unique=True)),
                ('news_article_cateogry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.category')),
            ],
            options={
                'db_table': 'newsarticle',
            },
        ),
        migrations.CreateModel(
            name='Newspaper',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=256)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('generated_using', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.configuration')),
            ],
            options={
                'db_table': 'newspaper',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('url', models.URLField(max_length=256, unique=True)),
            ],
            options={
                'db_table': 'source',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=256, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_banned', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Newspaper_NewsArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('newsarticle_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.newsarticle')),
                ('newspaper_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.newspaper')),
            ],
            options={
                'db_table': 'newspaper_newsarticle',
            },
        ),
        migrations.AddField(
            model_name='newspaper',
            name='user_newspaper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='newsarticle',
            name='news_article_source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.source'),
        ),
        migrations.CreateModel(
            name='Configuration_Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configuration_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.configuration')),
                ('source_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.source')),
            ],
            options={
                'db_table': 'configuration_source',
            },
        ),
        migrations.CreateModel(
            name='Configuration_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField()),
                ('category_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.category')),
                ('configuration_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NewsTailorDjangoApplication.configuration')),
            ],
            options={
                'db_table': 'configuration_category',
            },
        ),
        migrations.AddField(
            model_name='configuration',
            name='user_configuration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='newspaper_newsarticle',
            constraint=models.UniqueConstraint(fields=('newspaper_id', 'newsarticle_id'), name='unique_newspaper_newsarticle'),
        ),
        migrations.AddConstraint(
            model_name='configuration_source',
            constraint=models.UniqueConstraint(fields=('configuration_id', 'source_id'), name='unique_configuration_source'),
        ),
        migrations.AddConstraint(
            model_name='configuration_category',
            constraint=models.UniqueConstraint(fields=('configuration_id', 'category_id'), name='unique_configuration_category'),
        ),
    ]
